## 3. Bikesharing distribution ##

import pandas
bikes = pandas.read_csv("bike_rental_day.csv")
prob_over_5000 = bikes[bikes['cnt'] > 5000].shape[0] / bikes.shape[0]

## 4. Computing the distribution ##

import math

# Each item in this list represents one k, starting from 0 and going up to and including 30.
outcome_counts = list(range(31))

def prob_calc(n,k,p,q):
    "compute the probability of k outcomes out of N events occurring"
    prob_one = p**k
    prob_two = q**(n-k)
    comb_nb = math.factorial(n) / (math.factorial(k) * math.factorial(n-k))
    return prob_one * prob_two * comb_nb

p, q = .39, 1-.39
n = 30
outcome_probs = [prob_calc(n, i, p, q) for i in outcome_counts]

## 5. Plotting the distribution ##

import matplotlib.pyplot as plt

# The most likely number of days is between 10 and 15.
plt.bar(outcome_counts, outcome_probs)
plt.show()

## 6. Simplifying the computation ##

import scipy
from scipy import linspace
from scipy.stats import binom

# Create a range of numbers from 0 to 30, with 31 elements (each number has one entry).
outcome_counts = linspace(0, 30, 31)
# The pmf function in SciPy is an implementation of the mathematical probability mass function. 
# The pmf will give us the probability of each k in our outcome_counts list occurring
outcome_probs = binom.pmf(outcome_counts, 30, 0.39) # N = 30, and p =.39
# Plot the resulting data as a bar chart
plt.bar(outcome_counts, outcome_probs)
plt.show()

## 8. Computing the mean of a probability distribution ##

N, p = 30, .39
dist_mean = N * p

## 9. Computing the standard deviation ##

import math
N, p, q = 30, .39, 1-.39
dist_stdev = math.sqrt(N * p * q)

## 10. A different plot ##

# binomial distribution, with N=10, and p=.39.
outcome_counts = linspace(0, 10, 11)
outcome_probs = binom.pmf(outcome_counts, 10, 0.39)
plt.bar(outcome_counts, outcome_probs)
plt.show()

# binomial distribution, with N=100, and p=.39.
outcome_counts = linspace(0, 100, 101)
outcome_probs = binom.pmf(outcome_counts, 100, 0.39)
plt.bar(outcome_counts, outcome_probs)
plt.show()

## 11. The normal distribution ##

# Create a range of numbers from 0 to 100, with 101 elements (each number has one entry).
outcome_counts = scipy.linspace(0,100,101)

# Create a probability mass function along the outcome_counts.
outcome_probs = binom.pmf(outcome_counts,100,0.39)

# Plot a line, not a bar chart.
plt.plot(outcome_counts, outcome_probs)
plt.show()

## 12. Cumulative density function ##

outcome_counts = linspace(0, 30, 31)
# probability that k or less will occur can be generated by the cumulative density function
dist = binom.cdf(outcome_counts,30,0.39)
plt.plot(outcome_counts, dist)
plt.show()

## 14. Faster way to calculate likelihood ##

left_16 = binom.cdf(16, 30, .39)
right_16 = 1 - left_16
# The sum of all the probabilities to the left of k, including k:  left = binom.cdf(k,N,p)
# The sum of all probabilities to the right of k: right = 1 - left